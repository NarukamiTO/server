/*
 * Narukami TO - a server software reimplementation for a certain browser tank game.
 * Copyright (c) 2025  Daniil Pryima
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package jp.assasans.narukami.server.net.session

/**
 * Represents a session hash, which is a random 32-byte array generated by the server.
 *
 * Session hash is opaque to the client and is used by the server to determine which session a channel belongs to.
 * Session hash is also used to derive `initialSeed` for `XorCryptoContext`.
 */
class SessionHash(val value: ByteArray) {
  companion object {
    const val HASH_LENGTH = 32

    /**
     * Generates a random session hash.
     */
    fun random(): SessionHash {
      val hash = ByteArray(HASH_LENGTH)
      for(index in hash.indices) {
        hash[index] = (0..255).random().toByte()
      }

      val fingerprint = byteArrayOf(0x21, 0x12, 0x20, 0x19)
      val position = (0 until HASH_LENGTH - fingerprint.size).random()
      fingerprint.copyInto(hash, position)

      return SessionHash(hash)
    }
  }

  init {
    if(value.size != HASH_LENGTH) {
      throw IllegalArgumentException("Hash length must be 32 bytes, but was ${value.size} bytes")
    }
  }

  override fun equals(other: Any?): Boolean {
    if(this === other) return true
    if(javaClass != other?.javaClass) return false

    other as SessionHash

    return value.contentEquals(other.value)
  }

  override fun hashCode(): Int {
    return value.contentHashCode()
  }

  @ExperimentalStdlibApi
  override fun toString(): String {
    return "SessionHash(${value.toHexString()})"
  }
}
